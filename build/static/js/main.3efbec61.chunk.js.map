{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","content","onClick","baseUrl","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","patch","App","props","useState","notes","setNotes","newNoteInput","setNewNoteInput","showAll","setShowAll","notificationMessage","setNotificationMessage","useEffect","console","log","test","noteService","length","notesToShow","filter","Notification","message","className","Footer","event","style","color","fontStyle","fontSize","map","key","find","changedNote","catch","error","setTimeout","onSubmit","preventDefault","Date","Math","random","onChange","target","value","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3efbec61.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({note, toggleImportance}) => {\n  const label = note.important ? 'remove important mark' : 'mark as important' \n  return (\n    <li>\n      {note.content}\n  <button onClick={toggleImportance}>{label}</button>\n    </li>\n    )\n}\n\nexport default Note","import axios from 'axios'\r\nconst baseUrl = 'https://glacial-retreat-53406.herokuapp.com/api/notes'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    const nonExisting = {\r\n        id: 10000,\r\n        content: 'This note is not saved to server',\r\n        date: '2019-05-30T17:30:31.098Z',\r\n        important: true,\r\n      }\r\n    return request.then(response => response.data.concat(nonExisting))\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.patch(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default {\r\n    getAll,\r\n    create,\r\n    update\r\n}","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport noteService from './services/notes'\n\n\nconst App = (props) => {\n  const [notes, setNotes] = useState([])\n  const [newNoteInput, setNewNoteInput] = useState('new note 1')\n  const [showAll, setShowAll] = useState(true)\n  const [notificationMessage, setNotificationMessage] = useState(null)\n  useEffect(() => {\n    console.log('effect')\n    const test = noteService.getAll()\n    console.log('test', test)\n    test.then(response => {\n      console.log('promise fullfilled')\n      setNotes(response)\n    })\n  }, [])\n  console.log('render', notes.length, 'notes')\n\n  const notesToShow = showAll ? notes : notes.filter(note => note.important)\n\n  const toggleImportance = (id) => {\n    const note = notes.find(note => note.id === id)\n    const changedNote = {...note, important: !note.important}\n    noteService.update(id, changedNote)\n    .then(response => {\n      console.log('changed note', response)\n      setNotes(notes.map(note => note.id === id ? response : note))\n    })\n    .catch(error => {\n      setNotificationMessage(`The note ${note.content} cannot be found on the server`)\n      setTimeout(() => {\n        setNotificationMessage(null)\n      }, 5000)\n      setNotes(notes.filter(note => note.id !== id))\n    })\n    \n    //event.preventDefault()\n    console.log(`importance of ${id} will be toggled`)\n\n  }\n  //console.log(notesToShow)\n\n  const addNote = (event) => {\n    event.preventDefault()\n   // console.log('event target value', event.target.value)\n    const note = {\n      date: new Date(),\n      important: Math.random() < 0.5,\n      content: newNoteInput\n    }\n    \n    noteService.create(note)\n      .then(response =>{\n        console.log(response)\n        setNotes(notes.concat(response))\n        setNewNoteInput('')\n      })\n    }\n\n    const Notification = ({message}) => {\n      if (message === null) return null\n      return (\n        <div className=\"error\">\n          {notificationMessage}\n        </div>\n      )\n    }\n\n  const handleNoteChange = (event) => {\n   console.log('handnlenote')\n    console.log('handlenotechange', event)\n    setNewNoteInput(event.target.value)\n  }\n\n  const Footer = (event) => {\n    const footerStyle = {\n      color: 'green', \n      fontStyle: 'italic',\n      fontSize: 15\n    }\n\n    return (\n      <div style={footerStyle}>\n        <br/>\n        <em>Footer hehee</em>\n      </div>\n    )\n    }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <div>\n        <Notification message={notificationMessage}/>\n      <button onClick={() => setShowAll(!showAll)}>\n        Show {showAll ? 'important' : 'all'} Notes\n        </button>\n      </div>\n      \n      <ul>\n        {notesToShow.map((note) => \n        <Note key={note.id} note={note} toggleImportance={() => toggleImportance(note.id)}/>\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input onChange={handleNoteChange} value={newNoteInput}/>\n        <button type=\"submit\">add Note</button>\n      </form>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}